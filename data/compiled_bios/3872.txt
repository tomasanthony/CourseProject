 Zachary Tatlock Zachary Tatlock Zachary Tatlock ztatlock@cs.washington.edu Assistant Professor Allen School of Computer Science and Engineering University of Washington Research Students Projects Teaching Publications Service Collaborators Background News Ill be giving a talk at Galois Inc.in early September. I taught at the Deep Spec Summer School this July at Princeton. Check out the materials ! I spoke about verifying systems at the Coq Workshop 2018 co-located with FloC in Oxford, July 2018. See the slides ! I spoke at PLMW @ PLDI 2018 . It was a great event for junior researchers in PL thanks to all the hard work of the organizers. I lead the organizition for PNW PLSE 2018 . If you hang out in the Pacific Northwest and are working in software engineering, programming languages, systems, or related areas make sure to stay tuned for next years event! Past news Research Computer programming is a huge success; it plays a major role in most modern problem solving. However, for some problems we still have trouble writing programs that reliably do the right thing. My research improves software reliability by developing tools that help programmers ensure their code is safe and accurate. My students and I focus on important programs, including the software infrastructure that many other programs rely on (compilers, distributed systems, networks); control programs in safety-critical applications (radiotherapy devices); and approximations used in engineering and manufacturing (floating point, 3D printing). We spend many hours working out proofs on the whiteboard, but we always build working systems. We release our code so others can review and build on our work, and we get free food when we work late. All our papers and projects are collaborations with incredible colleagues . Our home base is in the vibrant UW PLSE group and we also have long term collaborations with SAMPL , Syslab , the Applications Driving Architectures (ADA) Center, and the SandCat Project . Students Im extremely fortunate to advise some spectacular PhD students: Steven Lyubomirsky Chandrakana Nandi 1 Pavel Panchekha 2 Jared Roesch James R. Wilcox Doug Woos 2,3 As well as some stellar BS and BS/MS students (co-advised with my graduate students): Josh Pollock Jason (Chen) Qiu David Thien Logan Weber After graduating, students go on to awesome new opportunities: Juliet Oh (HS 2015 Princeton BS) Alex Sanchez-Stern (BS/MS 2016 UCSD PhD) Daryl Zuniga 1 (BS 2016 Microsoft) Seth Pendergrass (BS 2017 Microsoft) Ryan Doenges (BS 2017 Cornell PhD) Luke Nelson 4 (BS 2017 UW PhD) Konstantin Weitz 2 (PhD 2017 Google) Adam Geller (BS 2018 UBC Phd) Eric Mullen 1 (PhD 2018 Google) Stuart Pernsteiner (PhD 2018 Galois Inc.) Co-advised with (1) Dan Grossman , (2) Michael D. Ernst , (3) Tom Anderson , (4) Xi Wang Projects Oeuf explores verified compilation from a subset of Gallina (Coqs functional programming language) to the CompCert Cminor intermediate representation to enable trustworthy binary executable code generation for Coq . [CPP 18] The Distributed Components project aims to provide modular verified components for distributed systems. [POPL 18, SNAPL 17] Incarnate applies ideas from compiler verifiation and numerical methods to improve the reliability of desktop 3D printers. [SNAPL 17] Cassius develops tools to automatically reason about web page layout and help developers ensure their pages are accessible to everyone. [PLDI 18] Herbgrind builds on Valgrind to provide binary instrumentation for dynamically identifying the root cause of floating-point inaccuracy in large, low-level numerical programs. [PLDI 18] Neutrons develops techniques to ensure the correctness of radiotherapy devices in the UW Clinical Neutron Therapy System . [ICALEPCS 17, CAV 16, SNAPL 15] Verdi provides a framework for formally verifying implementations of distributed systems. [CPP 16, PLDI 15] Herbie automatically improves the numerically accuracy of floating-point programs. [PLDI 15] FPBench provides a set of tools and community standard for floating-point accuracy benchmarks. [NSV 16] Checking out past projects can also help provide a sense for the sort of work we do: SpaceSearch Bagpipe Peek RoboFlow Jitk Reflex SafeDispatch Quark Peggy PEC/XCert Quail Teaching Wi 19 CSE 341: Programming Languages Fa 18 CSE 505: Graduate Programming Languages Sp 18 CSE 331: Software Design and Implementation Wi 18 CSE 341: Programming Languages Fa 17 CSE 505: Graduate Programming Languages Sp 17 CSE 599Z: Accurate Computing Wi 17 CSE 331: Software Design and Implementation Fa 16 CSE 505: Graduate Programming Languages Sp 16 CSE 599W: Systems Verification Wi 16 CSE 331: Software Design and Implementation Fa 15 CSE 505: Graduate Programming Languages Sp 15 CSE 341: Programming Languages Wi 15 CSE 505: Graduate Programming Languages Sp 14 CSE 341: Programming Languages Wi 14 CSE 506: Proof Assistants Fa 13 CSE 505: Graduate Programming Languages I was honored to be nominated for the UW Distinguished Teaching Award in 2015. Publications ICFP 18 Functional Programming for Compiling and Decompiling Computer-Aided Design Chandrakana Nandi , James R. Wilcox , Pavel Panchekha , Taylor Blau , Dan Grossman , Zachary Tatlock project FM 18 Combining Tools for Optimization and Analysis of Floating-Point Computations Heiko Becker , Pavel Panchekha , Eva Darulova , Zachary Tatlock Daisy Herbie FPBench MAPL 18 Relay: A New IR for Machine Learning Frameworks Jared Roesch , Steven Lyubomirsky , Logan Weber , Josh Pollock , Tianqi Chen , Zachary Tatlock project ITP 18 Software Verification with ITPs Should Use Binary Code Extraction to Reduce the TCB (short paper) Ramana Kumar , Eric Mullen , Zachary Tatlock , Magnus O. Myreen CakeML Oeuf PLDI 18 Verifying that Web Pages have Accessible Layout Pavel Panchekha , Adam Geller , Michael D. Ernst , Zachary Tatlock , Shoaib Kamil project PLDI 18 Finding Root Causes of Floating Point Error Alex Sanchez-Stern , Pavel Panchekha , Sorin Lerner , Zachary Tatlock project CPP 18 uf: Minimizing the Coq Extraction TCB Eric Mullen , Stuart Pernsteiner , James R. Wilcox , Zachary Tatlock , Dan Grossman project POPL 18 Programming and Proving with Distributed Protocols Ilya Sergey , James R. Wilcox , Zachary Tatlock project talk ICFP 17 Spacesearch: A Library for Building and Verifying Solver-aided Tools Konstantin Weitz , Steven Lyubomirsky , Stefan Heule , Emina Torlak , Michael D. Ernst , Zachary Tatlock project ICALEPCS 17 Automatic Formal Verification for EPICS Jonathan Jacky , Stefani Banerian , Michael D. Ernst , Calvin Loncaric , Stuart Pernsteiner , Zachary Tatlock , Emina Torlak project talk pdf slides bib publisher SNAPL 17 Programming Language Tools and Techniques for 3D Printing Chandrakana Nandi , Anat Caspi , Dan Grossman , Zachary Tatlock project SNAPL 17 Programming Language Abstractions for Modularly Verified Distributed Systems James R. Wilcox , Ilya Sergey , Zachary Tatlock project COQPL 17 Verification of Implementations of Distributed Systems Under Churn Ryan Doenges , James R. Wilcox , Doug Woos , Zachary Tatlock , Karl Palmskog project OOPSLA 16 Scalable Verification of Border Gateway Protocol Configurations with an SMT Solver Konstantin Weitz , Doug Woos , Emina Torlak , Michael D. Ernst , Arvind Krishnamurthy , Zachary Tatlock project NSV 16 Toward a Standard Benchmark Format and Suite for Floating-point Analysis Nasrine Damouche , Matthieu Martel , Pavel Panchekha , Chen Qiu , Alexander Sanchez-Stern , Zachary Tatlock project talk pdf slides NETPL 16 Formal Semantics and Automated Verification for the Border Gateway Protocol Konstantin Weitz , Doug Woos , Emina Torlak , Michael D. Ernst , Arvind Krishnamurthy , Zachary Tatlock project CAV 16 Investigating Safety of a Radiotherapy Machine using System Models with Pluggable Checkers Stuart Pernsteiner , Calvin Loncaric , Emina Torlak , Zachary Tatlock , Xi Wang , Michael D. Ernst , Jonathan Jacky project PLDI 16 Verified Peephole Optimizations for CompCert Eric Mullen , Daryl Zuniga , Zachary Tatlock , Dan Grossman project talk CPP 16 Planning for Change in a Formal Verification of the Raft Consensus Protocol James R. Wilcox , Doug Woos , Steve Anton , Zachary Tatlock , Michael D. Ernst , Tom Anderson project pdf slides SNAPL 15 Toward a Dependability Case Language and Workflow for a Radiation Therapy System Michael D. Ernst , Dan Grossman , Jon Jacky , Calvin Loncaric , Stuart Pernsteiner , Zachary Tatlock , Emina Torlak , Xi Wang project pdf slides PLDI 15 Automatically Improving Accuracy for Floating Point Expressions Pavel Panchekha , Alex Sanchez-Stern , James R. Wilcox , Zachary Tatlock project video abstract talk poster pdf slides Distinguished Paper Award PLDI 15 Verdi: A Framework for Implementing and Formally Verifying Distributed Systems James R. Wilcox , Doug Woos , Pavel Panchekha , Zachary Tatlock , Xi Wang , Michael D. Ernst , Tom Anderson project pdf slides HRI 15 Visual Robot Programming for Generalizable Mobile Manipulation Tasks Sonya Alexandrova , Zachary Tatlock , Maya Cakmak project ICRA 15 RoboFlow: A Flow-based Visual Programming Language for Mobile Manipulation Tasks Sonya Alexandrova , Zachary Tatlock , Maya Cakmak project COQPL 15 Peek: A Formally Verified Peephole Optimization Framework for x86 Eric Mullen , Zachary Tatlock , Dan Grossman project OSDI 14 Jitk: A Trustworthy In-Kernel Interpreter Infrastructure Xi Wang , David Lazar , Nickolai Zeldovich , Adam Chlipala , Zachary Tatlock project talk slides PLDI 14 Automating Formal Proofs for Reactive Systems Daniel Ricketts , Valentin Robert , Dongseok Jang , Zachary Tatlock , Sorin Lerner project talk pdf slides slides NDSS 14 SafeDispatch: Securing C++ Virtual Calls from Memory Corruption Attacks Dongseok Jang , Zachary Tatlock , Sorin Lerner pdf slides slides SECURITY 12 Establishing Browser Security Guarantees Through Formal Shim Verification Dongseok Jang , Zachary Tatlock , Sorin Lerner project poster talk slides LMCS 11 Equality Saturation: A New Approach to Optimization Ross Tate , Michael Stepp , Zachary Tatlock , Sorin Lerner project PLDI 10 Bringing Extensibility to Verified Compilers Zachary Tatlock , Sorin Lerner project slides PLDI 09 Proving Optimizations Correct Using Parameterized Program Equivalence Sudipta Kundu , Zachary Tatlock , Sorin Lerner project talk slides POPL 09 Equality Saturation: A New Approach to Optimization Ross Tate , Michael Stepp , Zachary Tatlock , Sorin Lerner project talk slides OOPSLA 08 Deep Typechecking and Refactoring Zachary Tatlock , Chris Tucker , David Shuffelton , Ranjit Jhala , Sorin Lerner project poster slides Similar listings are available at: DBLP , Google Scholar , Semantic Scholar , Research Gate Service Reviewing: ICFP 2019 External Review Committee TOPLAS Referee 2018 PLDI 2019 Program Committee CPP 2019 Program Committee ITP 2018 Program Committee POPL 2018 Program Committee PNW PLSE 2018 Organizing and Program Committee Chair Onward! 2017 Program Committee Splash 2017 Doctoral Symposium Program Committee ASPLOS 2017 External Reviewer POPL 2017 External Reviewer PLDI 2016 Program Committee PLDI 2016 Artifact Evaluation Committee co-Chair CPP 2016 Program Committee ASPLOS 2016 External Review Committee POPL 2016 External Review Committee POPL 2016 Student Research Competition Organizer PLDI 2015 Student Research Competition Committee CoqPL 2015 Program Committee POPL 2015 External Review Committee Inspirations at SPLASH 2014 Organizer and Speaker OOPSLA 2014 External Review Committee PLDI 2014 External Review Committee Compiler Construction 2009 External Reviewer Collaborators I have been very fortunate to work on projects with some amazing folks over the years: Adam Chlipala Adam Geller Alex Sanchez-Stern Anat Caspi Antony Hosking Arvind Krishnamurthy Bill Harris Calvin Loncaric Chandrakana Nandi Chen Qiu Chris Tucker Dan Grossman Daniel Ricketts Daryl Zuniga David Lazar David Shuffelton Dongseok Jang Doug Woos Emina Torlak Eric Mullen Eva Darulova Heiko Becker Ilya Sergey James R. Wilcox Jared Roesch Jon Jacky Joseph Chet Redmon Josh Pollock Juliet Oh Karl Palmskog Konstantin Weitz Logan Weber Luke Nelson Magnus O. Myreen Matthieu Martel Maya Cakmak Melissa Medsker-Galloway Michael D. Ernst Michael Stepp Nasrine Damouche Nickolai Zeldovich Pavel Panchekha Ramana Kumar Ranjit Jhala Ross Tate Ryan Doenges Seth Pendergrass Shoaib Kamil Sonya Alexandrova Sorin Lerner Stefan Heule Stefani Banerian Steve Anton Steven Lyubomirsky Stuart Pernsteiner Sudipta Kundu Suresh Jagannathan Taylor Blau Tianqi Chen Tom Anderson Valentin Robert Xi Wang Background My research interests include formal verification, compilers, and security. Even outside the lab, I try to code for fun most days. If Im not hacking, Im running with friends or making something. I can juggle and solve Rubiks cubes, but not at the same time. Also, my name has a wicked cool anagram . I spent six sunny years at UC San Diego working on the PhD with my incredible advisor Sorin Lerner . Throughout grad school, Sorin set a stellar example of how remarkable research can be when you put students first, an example I strive to emulate. I also learned many invaluable lessons from the great Ranjit Jhala , especially when it comes to writing and presentation: Less is more! I graduated from Purdue University back in Spring 2007 with degrees in Computer Science and Mathematics . As an undergraduate, I was fortunate to perform research with Suresh Jagannathan on the SML compiler MLton . For our Honors Project, advised by Antony Hosking , Bill Harris and I designed and implemented a domain specific language to control a giant neon sculpture over the web. Over nearly three years, I ran the lab component of Purdues introductory Java programming course. Past News Our submissions on Cassius and Herbgrind were both accepted to PLDI 2018 . The talks in Philly June 2018 were great! James Wilcox s February 2018 article in CACM on Highlights in Systems Verification has a nice account of Verdi and other marquee verification successes in the field. I was honored to receive an NSF CAREER Award in early 2018. The September 2018 CACM article on Hacker-Proof Coding featured our work on verifying radiotherapy control systems . In Fall 2017 Neutrons was featured in CSE News . In August 2017, Pavel and I presented at a Dagstuhl on Floating Point . In June 2017, I gave a talk at MFPS on the Bagpipe and Verdi projects for verifying distributed systems. In April 2017, I gave a talk at Purdue on the Bagpipe tool for verifying BGP router configurations. In February 2017, I gave a talk at Utah on Herbie , Herbgrind , and FPBench . I was honored to receive a Google Faculty Award in 2016 . I gave an invited talk at VSTTE 2016 on verifying radiotherapy control software . In 2010, I wrote a chapter for Dipu s book High-Level Verification . Misc We have a great running group, Race Condition Running , that trots all over the city and gets brunch each week. The PLSE faculty are a great group, with incredible fashion sense. I help out with a bunch of stuff around the Allen School, including TGIF . Sometimes famous guests swing by :) I also help with the holiday skit where we try to take things a little less seriously. In Spring 2017 my first PhD student Konstantin graduated! In Summer 2017, Pavel and I met with a bunch of great folks at a Dagstuhl on Floating Point . In Spring 2017, a bunch of us went to the second SNAPL at Asilomar. Emina and I made video about Neutrons . We made a cool video showing how Roboflow works. My friend Garbo and I run Seattles premier pizza haiku blog: Seattle Pizza Odyssey . Some folks in the department juggle stuff. We teach many important life skills here in the Allen School. UCSDs 2014 Holiday Party featured an inspirational ad , and Ed noticed . Once while interning at MSR India , I got to drive an auto rickshaw. Some things worth reading: John Regehrs Blog Matt Mights Blog Fogarty on Code and Contribution Gabriel on Worse Is Better Simon on The Architecture of Complexity Style: The Basics of Clarity and Grace Orwell on Politics and the English Language Twenty things I wish Id known when I started my PhD So long, and thanks for the Ph.D.! Some interesting opinions on conferences and opinions: Conference Reviewing Considered Harmful Low Acceptance Rates of Conference Papers Considered Harmful Considered Harmful Essays Considered Harmful Some useful videos that illustrate a point: Gary Bernhardts Wat talk on sharp edges in dynamic scripting languages Mary Carillos epic improvisation shows cohesiveness without coherence (they can be independent!) My academic genealogy: Royal W. Sorensen Physics Tree Vincent C. Rideout Physics Tree Gerald Estrin David Martin David Patterson David Ungar Craig Chambers Sorin Lerner Zachary Tatlock The best bound I know on my Erds number , is 4 via James Wilcox : Pandoc Validate HTML/CSS Check Links 
