 Department of Computer Science The University of Hong Kong (HKU) Room 421, Chow Yei Ching Building, HKU, Pok Fu Lam Road, Hong Kong [ Resume | Publication | Group members | Collaborators ] I am an assistant professor in HKU CS starting from Jan 2015 (right after I got my PhD from Columbia University advised by Prof. Junfeng Yang ). I lead the HKU Systems Software Group . My research includes distributed systems, programming languages, cloud computing, big-data, block-chains, and AI. I have a particular focus on improving software reliability and security. Recently I receive several research awards, including a Croucher Innovation Award in 2016, an award from the Huawei Innovation Research Program (HIRP) in 2017, and an outstanding (best) paper award from ACSAC '17. I admit a few PhD students every year. I expect my students to have good skills/experience on hacking systems software (e.g., Linux kernel, LLVM, or distributed protocols) and have strong motivation on research. If you think you qualify, please directly apply here and select "systems and networking research" as your interested field during the application. If you also want to talk with me individually, please read my recent papers (at least several times for each paper), understand how they work deeply, compile and run them, and then email me what new research topics you can think of (e.g., new applications or significant improvments of my systems, or some other relevant and crazy ideas). I will reply your email only if your ideas make sense. I have several well funded research grants that can support student Research Assistants (RAs) and summer research interns. If you are interested and you can work full-time in HKU for a few months, you can send me emails with your CV and thoughts on my papers. Apr 2018: Recently I am looking for Postdoc who have expertise on wireless networking (e.g., sensor networks and UAVs). I also look for students who have fluent experience on UAV (e.g., DJI) programming and have time to work as full-time RAs in HKU for a few months. If you have, please send me an email with your CV. Selected Publication Effectively Mitigating I/O Inactivity in vCPU Scheduling [ pdf | code ] Weiwei Jia, Cheng Wang, Xusheng Chen, Jianchen Shan, Xiaowei Shang, Heming Cui , Xiaoning Ding, Luwei Cheng, F.C.M. Lau, Yuexuan Wang, Yuangang Wang Proceedings of the 2018 USENIX Annual Technical Conference ( ATC '18 ) Describes vMigrator, a lightweight, easy to use tool that can effectively mitigate I/O inactivity in vCPU scheduling, greatly improving I/O performance in VMs. PLOVER: Fast, Multi-core Scalable Virtual Machine Fault-tolerance [ pdf | video | code ] Cheng Wang, Xusheng Chen, Weiwei Jia, Haoran Qiu, Boxuan Li, Shixiong Zhao, Heming Cui Proceedings of the 15th USENIX Symposium on Networked Systems Design and Implementation 2018 ( NSDI '18 ) Describes PLOVER, a multi-core scalable VM fault-tolerance system built on the Virtualized State Machine Replication (VSMR) concept. OWL: Understanding and Detecting Concurrency Attacks [ pdf | code ] Shixiong Zhao, Rui Gu, Haoran Qiu, Tsz On Li, Yuexuan Wang, Heming Cui , Junfeng Yang Proceedings of The 48th IEEE/IFIP International Conference on Dependable Systems and Networks 2018 ( DSN '18 ) Describes OWL, the first tool for detecting multi-threading concurrency attacks in general software (e.g., Linux kernels). How Local Information Improves Rendezvous in Cognitive Radio Networks [ pdf ] Yongqin Fu, Yuexuan Wang, Zhaoquan Gu, Xiaolin Zheng, Tianhao Wei, Zhen Cao, Heming Cui , F.C.M. Lau Proceedings of the IEEE International Conference on Sensing, Communication and Networking 2018 ( SECON '18 ) Describes optimized rendezvous algorithms for CRN. APUS: Fast and Scalable PAXOS on RDMA [ pdf | video | code ] Cheng Wang, Jianyu Jiang, Xusheng Chen, Ning Yi, Heming Cui Proceedings of the ACM Symposium on Cloud Computing ( SOCC '17 ), 2017 Describes APUS, a fast Paxos protocol and its runtime system using fast RDMA features. Kakute: A Precise, Unified Information Flow Analysis System for Big-data Security [ pdf | video | code ] Jianyu Jiang, Shixiong Zhao, Danish Alsayed, Yuexuan Wang, Heming Cui , Feng Liang, Zhaoquan Gu Proceedings of the Annual Computer Security Applications Conference ( ACSAC '17 ), 2017. Best paper award! Describes Kakute, an information flow tracking system for preventing various big-data security issues (data leakage in user-defined-functions) without reporting false positives. Confluence: Speeding Up Iterative Distributed Operations by Key-dependency-aware Partitioning Feng Liang, F.C.M. Lau, Heming Cui , C.L. Wang IEEE Transactions on Parallel and Distributed Systems 2017 ( TPDS '17 ) Describes Confluence, a system that can greatly reduce shuffle traffic and improve performance in big-data flatforms using a novel key-dependency-aware partitioning scheme. Paxos Made Transparent [ pdf | code ] Heming Cui , Rui Gu, Cheng Liu, Tianyu Chen, Junfeng Yang Proceedings of the 25th ACM Symposium on Operating Systems Principles ( SOSP '15 ), 2015 Describes RepBox, a state machine replication system that can transparently replicate general multithreaded programs without intervention from the developers. Parrot: a Practical Runtime for Deterministic, Stable, and Reliable Threads [ pdf | slides | video | code ] Heming Cui , Jiri Simsa , Yi-Hong Lin, Hao Li, Ben Blum , Xinan Xu, Junfeng Yang , Garth Gibson , Randal E. Bryant Proceedings of the 24th ACM Symposium on Operating Systems Principles ( SOSP '13 ), 2013 Describes PARROT, a simple and deployable system for making threads deterministic and stable. PARROT is easy to use, fast, scalable, and it improves the state-space coverage of a state-of-the-art model checker, DBUG, by many orders of magnitude. Together with the code, we also released a benchmark suite with 100+ multithreaded programs, and PARROT's complete results on these programs. Determinism Is Not Enough: Making Parallel Programs Reliable with Stable Multithreading Junfeng Yang , Heming Cui , Jingyue Wu , Yang Tang , Gang Hu Communications of the ACM (2014) Describes our vision of stable multithreading, a radically new approach to making multithreading reliable, and summarizes our last five years of work on designing, building, and applying stable multithreading systems. Verifying Systems Rules Using Rule-Directed Symbolic Execution [ pdf | slides ] Heming Cui , Gang Hu, Jingyue Wu , Junfeng Yang Eighteenth International Conference on Architecture Support for Programming Languages and Operating Systems ( ASPLOS '13 ), 2013 Describes WOODPECKER, a system that leverages path slicing to speed up symbolic execution. It enables users to check systems rules, and avoids checking program paths irrelevant to the rule, drastically reducing the amount of redundant work. Sound and Precise Analysis of Parallel Programs through Schedule Specialization [ pdf ] Jingyue Wu , Yang Tang , Gang Hu, Heming Cui , Junfeng Yang Proceedings of the 33rd ACM SIGPLAN Conference on Programming Language Design and Implementation ( PLDI '12 ), 2012 Describes a program analysis framework for analyzing multithreaded programs with high precision. The key idea is to statically analyze a multithreaded program toward only a small set of schedules to improve precision, then enforce these schedules at runtime for soundness. Efficient Deterministic Multithreading through Schedule Relaxation [ abstract | pdf | slides ] Heming Cui , Jingyue Wu , John Gallagher , Huayang Guo, Junfeng Yang Proceedings of 23rd ACM Symposium on Operating Systems Principles ( SOSP '11 ), 2011 Describes PEREGRINE, a system for efficiently making threads deterministic, addressing a key open challenge within the field of deterministic execution. Stable Deterministic Multithreading through Schedule Memoization [ abstract | pdf | slides ] Heming Cui , Jingyue Wu , Chia-che Tsai, Junfeng Yang Proceedings of the Ninth Symposium on Operating Systems Design and Implementation ( OSDI '10 ), 2010 Describes TERN, a system for making threads more deterministic and stable. The key idea is to memoize past schedules and reuse them when possible, much like the natural tendencies in animals and humans to repeat familiar routes to avoid possible hazards along unknown routes. Bypassing Races in Live Applications with Execution Filters [ abstract | pdf ] Jingyue Wu , Heming Cui , Junfeng Yang Proceedings of the Ninth Symposium on Operating Systems Design and Implementation ( OSDI '10 ), 2010 Describes LOOM, a live-workaround system for fixing races in live applications. LOOM is safe (live-update will not introduce new errors), fast (negligible overhead for most benchmarks), and flexible (able to fix all bugs evaluated). Members in My HKU Systems Software Group Group photo Prof. Yuexuan Wang (Professor in Zhejiang University, visiting scholar) Weiwei Jia (PhD student, 2018 to now) Tianxiang Shen (PhD student, 2018 to now) Qi Ji (PhD student, 2018 to now) Shixiong Zhao (PhD student, 2017 to now) Xusheng Chen (PhD student, 2017 to now) Jianyu Jiang (PhD student, 2016 to now) Cheng Wang (PhD student, 2015 to now) Senran Zhang (Master student in Zhejiang University, research assistant) Tong Shen (Master student in Zhejiang University, research assistant) Tsz On Li (Undergraduate student in HKU CS, research assistant) Collaborators Prof. F.C.M. Lau (Professor in HKU) Prof. C.L. Wang (Professor in HKU) Prof. Chuan Wu (Professor in HKU) Prof. Junfeng Yang (Professor in Colubmia, my PhD advisor) Prof. Yong Cui (Professor in Tsinghua) Prof. Yong Zhang (Professor in SIAT, CAS) Prof. Xiaoning Ding (Professor in NJIT) Rui Gu (Researcher in VMWare) Dr. Luwei Cheng (Researcher in Facebook) Dr. Jiri Simsa (Researcher in Google) Dr. Jingyue Wu (Researcher in Google) Prof. Randy Bryant (Professor in CMU) Prof. Garth Gibson (Professor in CMU) 
