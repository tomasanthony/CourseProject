 Katherine E. Isaacs Home Publications Teaching PerfVis Survey CV Contact UA email: kisaacs ACM email: kisaacs External Links Google Scholar Project Websites NSF III-1656958: Dependency Visualization NSF IIS-1844573: Systems Graphs Visualization Project Code Roundtrip CFGExplorer Ravel graphterm Boxfish About I am an assistant professor at the University of Arizona. My interests are at the intersection of data visualization and computing systems. I develop new methods of representing complex computing processes for exploration and analysis of their behavior, with applications to high performance computing, distributed computing, data science, program analysis, and optimization. I maintain a survey of such visualizations here . Projects Traveler - Visualization for Asynchronous Many Task Models Phylanx - Distributed Array Toolkit Parallel trace visualization relies heavily on Gantt charts. However, asynchronous runtimes operate on very large task graphs. In collaboration with the Ste||ar group at LSU and the APEX project at University of Oregon, we are re-thinking (visual) performance analysis from the runtime, through the instrumentation, to the analysis and visual tools. We are targeting both runtime experts as well as application scientists. This is in conjunction with the Phylanx project, building a distributed array toolkit targetting several data science applications. See also: HPX Website Control Flow Graphs and Dynamic Traces, with Science Up To Par (s2par): Language Agnostic Optimization of Scientific Data Analysis Codes Parallelizing scientific and data analysis applications can require significant engineering effort. For in-development applications and frequently altered data analysis scripts especially, the time commitment is a significant barrier to the gains of parallelization. Science Up To Par applies dynamic binary analysis and specialization to automatically parallelize scientific applications in a language-independent manner. This project is in collaboration with Michelle Strout and Saumya Debray . In support of these efforts, as part of the NSF-funded Dependencies Visualization project, we are developing visual tools for analyzing control flow graphs and dynamically collected instruction traces. This material is based upon work supported by the National Science Foundation under Grant No. NSF III-1656958 . Visualizing Dependencies Project Website s2par Project Overview - LCPC 2017 CFGExplorer - EuroVis 2018 | CFGExplorer on Github Ravel - Parallel Execution Trace Visualization Traces are records of actions occurring during a program's execution, such as function calls and communication. They are a powerful tool in performance analysis as they can contain the detailed data necessary to reconstruct exactly what occurred. However, understanding traces is difficult due to the huge number of actions and relationships among all processes. As such, timeline visualizations are frequently employed to explore the data. Unfortunately, timelines become cluttered and difficult to interpret for even moderate numbers of processes. Ravel focuses on increasing the scalability and utility of trace visualizations via a structure-centric approach which approximates the developers' intended organization of trace events. Visualizing this logical structure untangles communication patterns, allows aggregation in process space, and provides users with much needed context. Analyses using Ravel have led to the discovery and understanding of performance issues in several massively parallel applications. Visualization - InfoVis '14 | Ravel on github Logical structure (MPI) - TPDS 2016 | Logical structure (Charm++) - SC15 Boxfish - Linking Domains and Network Visualization Numerous factors, such as the placement of specific tasks in the hardware, their timing data, and functions of multiple tasks, affect the performance of parallel applications. Boxfish was developed to support visualizing these relationships. Boxfish manages complex filtering of data and linking of visualizations, even when these relationships are not direct or bijective. Several network visualization modules have been developed for Boxfish, including multiple views of 3D torus/mesh networks and a 5D torus/mesh. Analysis using these visualizations in Boxfish has aided in understanding the interactions of task assignment and the underlying system network for both individual applications and the interactions of several applications on a shared system. Boxfish on github | Boxfish poster abstract - SC12 Visualization Modules 3D torus visualization - InfoVis '12 | 5D torus visualization - VPA '14 Applications Task mapping - SC12 | Job placement - SC13 | Task mapping, 5D torus - HiPC '14 Scalable Communication Visualization Traditional statistical plots and graphics for performance analysis may prove ineffective because they do not show data in the most meaningful context. For one library, this meant mapping performance data to its communication overlay. The communication graph grows as the application uses increasing numbers of parallel processes. This requires a visualization that aggregates intelligently to scale with that parallism while still depicting behaviors of interest. Novels Views - SC12 
