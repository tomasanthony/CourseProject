Suresh Jagannathan Samuel D. Conte Professor of Computer Science Professor of Electrical and Computer Engineering (courtesy)Joined department: 2002 EducationBS, State University of New York at Stony Brook, Computer Science (1982) MS, Massachusetts Institute of Technology, Electrical Engineering and Computer Science (1985) PhD, Massachusetts Institute of Technology, Electrical Engineering and Computer Science (1989) Professor Jagannathan is interested in the semantics and implementation of high-level programming languages. His work focusses on formal methods for describing and implementing such languages, e.g., type theory, program analysis, abstract interpretation, etc., as well as compiler and runtime techniques that leverage such analyses. He also has an active interest in the specification, verification, and implementation of concurrent and distributed systems. Much of this work involves exploring the role of verification techniques to enable sound program optimizations for concurrent programs. Certified compilation of expressive concurrent languages is another subject being actively pursued. An important sub-topic is the definition of expressive memory models that define visibility and consistency guarantees on shared data accesses. Lifting processor-defined memory consistency properties to inform compilation and language specification is an important focus area. Selected PublicationsMatko Botincan, Mike Dodds, Suresh Jagannathan, "Resource-Sensitive Synchronization Inference by Abduction", ACM Symposium on Principles of Programming Languages (2012)Lukasz Ziarek, KC Sivaramakrishnan, Suresh Jagannathan, "Composable Asynchronous Events", ACM Conference on Programming Language Design and Implementation (2011)Jaroslav Sevcik, Victor Vafeiadis, Francesco Zappa-Nardelli, Suresh Jagannathan, Peter Sewell, "Relaxed Memory Concurrency and Verifying Compilation", ACM Symposium on Principles of Programming Languages (2011) 
