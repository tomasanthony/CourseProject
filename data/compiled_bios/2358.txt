I have a BSc in Computer Science and Mathematics and a BSc (Hons) in  Logic and Computation, both from Victoria University of Wellington, New Zealand. In 2009, I received a PhD on  formal derivations of concurrent algorithms at the University of Queensland, Australia. After this, I held postdoctorate positions at the University of Queensland and then at the University of Sheffield. I was a lecturer at Brunel University London (2014-18).My research is on formal techniques and verification methods for concurrent and real-time systems. This includes concurrent objects, transactional memory and associated correctness conditions; weak memory models; algebraic techniques; and hybrid systems.I am actively seeking good PhD students. Please contact me for further details.COM1026 Foundations of ComputingCOM2022 Computer NetworkingCOM3028 Systems VerificationCOM3001 Professional ProjectCOMM002 MSc DissertationProfessional Training (Computer Science)[1] J.Derrick, G.Smith, L.Groves, and B.Dongol. A proof method for linearizability on TSO architectures. In Provably Correct Systems, NASA Monographs in Systems and Software Engineering, pages 61--91. Springer, 2017.[2] B.Dongol, R.Jagadeesan, and J.Riely. Transactions in relaxed memory architectures. PACMPL, 2(POPL):18:1--18:29, 2018.[3] B.Dongol and R.M. Hierons. Decidability and complexity for quiescent consistency and its variations. Information and Computation, 2017. In press.[4] J.Derrick, S.Doherty, B.Dongol, G.Schellhorn, O.Travkin, and H.Wehrheim. Mechanized proofs of opacity: A comparison of two techniques. Formal Aspects of Computing, 2017. Accepted 21 July, 2017 (Mechanisations available here: https://swt.informatik.uni-augsburg.de/swt/projects/Opacity-TML.html).[5] B.Dongol, V.B.F. Gomes, I.J. Hayes, and G.Struth. Partial semigroups and convolution algebras. Archive of Formal Proofs, 2017, 2017.[6] B.Dongol, I.J. Hayes, and G.Struth. Convolution as a unifying concept: Applications in separation logic, interval calculi, and concurrency. ACM Trans. Comput. Log., 17(3):15:1--15:25, 2016.[7] B.Dongol and J.Derrick. Verifying linearisability: A comparative survey. ACM Comput. Surv., 48(2):19, 2015.[8] B.Dongol and J.Derrick. Interval-based data refinement: A uniform approach to true concurrency in discrete and real-time systems. Sci. Comput. Program., 111:214--247, 2015.[9] B.Dongol, I.J. Hayes, and P.J. Robinson. Reasoning about goal-directed real-time teleo-reactive programs. Formal Asp. Comput., 26(3):563--589, 2014.[10] B.Dongol, I.J. Hayes, and J.Derrick. Deriving real-time action systems with multiple time bands using algebraic reasoning. Sci. Comput. Program., 85:137--165, 2014.[11] I.J. Hayes, A.Burns, B.Dongol, and C.B. Jones. Comparing degrees of non-determinism in expression evaluation. Comput. J., 56(6):741--755, 2013.[12] B.Dongol and I.J. Hayes. Deriving real-time action systems in a sampling logic. Sci. Comput. Program., 78(11):2047--2063, 2013.[13] R.Colvin and B.Dongol. A general technique for proving lock-freedom. Sci. Comput. Program., 74(3):143--165, 2009.[14]B.Dongol and A.J. Mooij. Streamlining progress-based derivations of concurrent programs. Formal Asp. Comput., 20(2):141--160, 2008.[15]B.Dongol and D.Goldson. Extending the theory of Owicki and Gries with a logic of progress. Logical Methods in Computer Science, 2(1), 2006.[16] S.Doherty, B.Dongol, H.Wehrheim, and J.Derrick. Brief announcement: Generalising concurrent correctness to weak memory. In DISC, 2018. To appear.[17] S.Doherty, B.Dongol, H.Wehrheim, and J.Derrick. Making linearizability compositional for partially ordered executions. In iFM, Lecture Notes in Computer Science. Springer, 2018. To appear.[18] B.Dongol, R.Jagadeesan, J.Riely, and A.Armstrong. On abstraction and compositionality for weak-memory linearisability. In VMCAI, volume 10747 of Lecture Notes in Computer Science, pages 183--204. Springer, 2018.[19] A.Armstrong and B.Dongol. Modularising opacity verification for hybrid transactional memory. In FORTE, volume 10321 of Lecture Notes in Computer Science, pages 33--49. Springer, 2017.[20] A.Armstrong, B.Dongol, and S.Doherty. Proving opacity via linearizability: A sound and complete method. In FORTE, volume 10321 of Lecture Notes in Computer Science, pages 50--66. Springer, 2017. (Previous version: https://arxiv.org/abs/1610.01004).[21] S.Doherty, B.Dongol, J.Derrick, G.Schellhorn, and H.Wehrheim. Proving opacity of a pessimistic STM. In OPODIS, volume70 of LIPIcs, pages 35:1--35:17. Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik, 2016.[22] B.Dongol. An interval logic for stream-processing functions: A convolution-based construction. In FTSCS, volume 694 of Communications in Computer and Information Science, pages 20--35, 2016.[23] B.Dongol and L.Groves. Contextual trace refinement for concurrent objects: Safety and progress. In ICFEM, volume 10009 of Lecture Notes in Computer Science, pages 261--278, 2016.[24] B.Dongol and R.M. Hierons. Decidability and complexity for quiescent consistency. In LICS, pages 116--125. ACM, 2016.[25] B.Dongol and L.Groves. Towards linking correctness conditions for concurrent objects and contextual trace refinement. In Refine@FM, volume 209 of EPTCS, pages 107--111, 2015.[26] J.Derrick, B.Dongol, G.Schellhorn, O.Travkin, and H.Wehrheim. Verifying opacity of a transactional mutex lock. In N.Bjrner and F.D. deBoer, editors, FM, volume 9109 of LNCS, pages 161--177. Springer, 2015.[27] B.Dongol, V.B.F. Gomes, and G.Struth. A program construction and verification tool for separation logic. In R.Hinze and J.Voigtlnder, editors, MPC, volume 9129 of LNCS, pages 137--158. Springer, 2015.[28] B.Dongol, J.Derrick, L.Groves, and G.Smith. Defining correctness conditions for concurrent objects in multicore architectures. In J.T. Boyland, editor, ECOOP, volume37 of LIPIcs, pages 470--494. Schloss Dagstuhl - Leibniz-Zentrum fuer Informatik, 2015.[29] J.Derrick, G.Smith, L.Groves, and B.Dongol. Using coarse-grained abstractions to verify linearizability on TSO architectures. In E.Yahav, editor, HVC, volume 8855 of LNCS, pages 1--16. Springer, 2014.[30] G.Smith, J.Derrick, and B.Dongol. Admit your weakness: Verifying correctness on TSO architectures. In I.Lanese and E.Madelaine, editors, FACS, volume 8997 of LNCS, pages 364--383. Springer, 2014.[31] J.Derrick, G.Smith, and B.Dongol. Verifying linearizability on TSO architectures. In E.Albert and E.Sekerinski, editors, iFM, volume 8739 of LNCS, pages 341--356. Springer, 2014.[32] B.Dongol, J.Derrick, and G.Smith. Reasoning algebraically about refinement on TSO architectures. In G.Ciobanu and D.Mry, editors, ICTAC, volume 8687 of LNCS, pages 151--168. Springer, 2014.[33] J.Derrick, B.Dongol, G.Schellhorn, B.Tofan, O.Travkin, and H.Wehrheim. Quiescent consistency: Defining and verifying relaxed linearizability. In C.B. Jones, P.Pihlajasaari, and J.Sun, editors, FM, volume 8442 of LNCS, pages 200--214. Springer, 2014.[34] B.Dongol and J.Derrick. Simplifying proofs of linearisability using layers of abstraction. ECEASST, 66, 2013.[35] B.Dongol, O.Travkin, J.Derrick, and H.Wehrheim. A high-level semantics for program execution under total store order memory. In Z.Liu, J.Woodcock, and H.Zhu, editors, ICTAC, volume 8049 of LNCS, pages 177--194. Springer, 2013.[36] B.Dongol and J.Derrick. Data refinement for true concurrency. In J.Derrick, E.A. Boiten, and S.Reeves, editors, Refine, volume 115 of EPTCS, pages 15--35, 2013.[37] B.Dongol, J.Derrick, and I.J. Hayes. Fractional permissions and non-deterministic evaluators in interval temporal logic. ECEASST, 53, 2012.[38] B.Dongol, I.J. Hayes, L.Meinicke, and K.Solin. Towards an algebra for real-time programs. In W.Kahl and T.G. Griffin, editors, RAMICS, volume 7560 of LNCS, pages 50--65. Springer, 2012.[39] B.Dongol and I.J. Hayes. Deriving real-time action systems controllers from multiscale system specifications. In J.Gibbons and P.Nogueira, editors, MPC, volume 7342 of LNCS, pages 102--131. Springer, 2012.[40] B.Dongol and I.J. Hayes. Rely/guarantee reasoning for teleo-reactive programs over multiple time bands. In J.Derrick, S.Gnesi, D.Latella, and H.Treharne, editors,  IFM, volume 7321 of LNCS, pages 39--53. Springer, 2012.[41] B.Dongol and I.J. Hayes. Approximating idealised real-time specifications using time bands. ECEASST, 46:1--16, 2012. 11th International Workshop on Automated Verification of Critical Systems.[42] B.Dongol and I.J. Hayes. Compositional action system derivation using enforced properties. In C.Bolduc, J.Desharnais, and B.Ktari, editors, MPC, volume 6120 of LNCS, pages 119--139. Springer, 2010.[43] B.Dongol and I.J. Hayes. Enforcing safety and progress properties: An approach to concurrent program derivation. In ASWEC, pages 3--12. IEEE Computer Society, 2009.[44] R.Colvin and B.Dongol. Verifying lock-freedom using well-founded orders. In C.B. Jones, Z.Liu, and J.Woodcock, editors, ICTAC, volume 4711 of LNCS, pages 124--138. Springer, 2007.[45] B.Dongol. Formalising progress properties of non-blocking programs. In Z.Liu and J.He, editors, ICFEM, volume 4260 of LNCS, pages 284--303. Springer, 2006.[46] B.Dongol. Towards simpler proofs of lock-freedom. In Preliminary Proceedings of the 1st Asian Working Conference on Verified Software, pages 136--146, 2006.[47] B.Dongol. Derivation of Java monitors. In ASWEC, pages 211--220. IEEE Computer Society, 2006.[48] B.Dongol and A.J. Mooij. Progress in deriving concurrent programs: Emphasizing the role of stable guards. In T.Uustalu, editor, MPC, volume 4014 of LNCS, pages 140--161. Springer, 2006.[49] D.Goldson and B.Dongol. Concurrent program design in the extended theory of Owicki and Gries. In M.D. Atkinson and F.K. H.A. Dehne, editors, CATS, volume41 of CRPIT, pages 41--50. Australian Computer Society, 2005.[50] B.Dongol. Progress-based verification and derivation of concurrent programs. PhD thesis, School of Information Technology and Electrical Engineering, The University of Queensland, Qld, Australia, October 2009.[51]B.Dongol, I.J. Hayes, and G.Struth. Relational Convolution, Generalised Modalities and Incidence Algebras. ArXiv e-prints, February 2017.[52]B.Dongol and J.Derrick. Proving linearisability via coarse-grained abstraction. CoRR, abs/1212.5116, 2012.[53]B.Dongol and I.J. Hayes. Reasoning about teleo-reactive programs under parallel composition. Technical Report SSE-2011-01, Division of Systems and Software Engineering Research, School of Information Technology and Electrical Engineering, The University of Queensland, QLD 4072, Australia, April 2011.[54]B.Dongol and I.J. Hayes. Trace semantics for the Owicki-Gries theory integrated with the progress logic from UNITY. Technical Report SSE-2007-02, Division of Systems and Software Engineering Research, School of Information Technology and Electrical Engineering, The University of Queensland, QLD 4072, Australia, April 2007.
