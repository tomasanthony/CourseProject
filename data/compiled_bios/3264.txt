 Software Engineering Center / Main navigation | Main content Campuses: Twin Cities Crookston Duluth Morris Rochester Other Locations Go to the U of M home page OneStop myU search College of Science and Engineering CSE Home CSE Directory Give to CSE Student Dashboard UMSEC About UMSEC Directory Faculty Mats Heimdahl Adjunct Faculty Staff Publications Presentations Research Education News Events Outreach Contact Information Sign up to receive special event notifications by email. Learn about our Master of Science in Software Engineering program. Software Engineering Center You are here Home Directory Faculty Mats Heimdahl Computer Science and Engineering Department Head Professor Phone Number: 612-625-2068 Office Location: Kenneth H Keller Hall room 6-201 Personal Email: heimdahl@umn.edu Education: M.S. Computer Science and Engineering from the Royal Institute of Technology, Sweden, 1988. Ph.D. Computer Science, University of California at Irvine, 1994. Biography: Professor Mats Heimdahl specializes in software engineering and safety critical systems. He is the director of the University of Minnesota Software Engineering Center (UMSEC). Heimdahl is the recipient of the National Science Foundation's CAREER award, a McKnight Land-Grant Professorship and the McKnight Presidential Fellow award at the University of Minnesota, and the University of Minnesota Award for Outstanding Contributions to Post-Baccalaureate, Graduate, and Professional Education. Research: Software is increasingly involved in our lives; software controls physical systems ranging from microwave ovens and watches to nuclear power plants, aircraft, and cars. Computer-related failures can, in many of these applications, have catastrophic effects. My research group, the Critical Systems Research Group (CriSys), is conducting research in software engineering and is investigating methods and tools to help us develop software with predictable behavior free from defects. Research in this area spans all aspects of system development ranging from concept formation and requirements specification, through design and implementation, to testing and maintenance. In particular, we are currently investigating model-based software development for critical systems. Specifically, we are focusing on how to use various static verification techniques to assure that software requirements models possess desirable properties, how to correctly generate production code from software requirements models, how to validate models, and how to effectively use the models in the testing process. Interests: Software engineering and safety critical systems. Recent Publications Contract discovery from black-box components Complex computer-controlled systems are commonly constructed in a middle-out fashion where existing subsystems and available components have a significant influence on system architecture and drive design decisions. During system design, the architect must verify that the components, put together as specified in the architecture, will achieve the desired system behavior. This typically leads to further design modifications or adjustments to requirements triggering another iteration of the design-verify cycle. Read more about Contract discovery from black-box components Toward Rigorous Object-Code Coverage Criteria Object-branch coverage (OBC) is often used as a measure of the thoroughness of tests suites, augmenting or substituting source-code based structural criteria such as branch coverage and modified condition/decision coverage (MC/DC). In addition, with the increasing use of third-party components for which source-code access may be unavailable, robust object-code coverage criteria are essential to assess how well the components are exercised during testing. Read more about Toward Rigorous Object-Code Coverage Criteria Architecture Modeling and Analysis for Safety Engineering Architecture description languages such as AADL allow systems engineers to specify the structure of system architectures and perform several analyses over them, including schedulability, resource analysis, and information flow. In addition, they permit system-level requirements to be specified and analyzed early in the development process of airborne and ground-based systems. These tools can also be used to perform safety analysis based on the system architecture and initial functional decomposition. Read more about Architecture Modeling and Analysis for Safety Engineering Pages 1 2 3 4 5 6 7 8 9 next last 2019 Regents of the University of Minnesota. All rights reserved. The University of Minnesota is an equal opportunity educator and employer Last modified on Jan 17, 2019 Twin Cities Campus: Parking & Transportation Maps & Directions Directories Contact U of M Privacy 
