Trevor Brown's home page	Welcome to Trevor Brown's home page	I am currently an assistant professor in the Computer Science department at the University of Waterloo.	Before that, I was a postdoctoral researcher at the Institute of Science and Technology, Austria.	Before that, I was a postdoctoral researcher at the Technion, Israel Institute of Technology.	Before that, I was a PhD student at the University of Toronto.	Although I was in the theory group at U of T, I would say that my work is closer to systems work than theory.	I care greatly about rigor, whether in theoretical or experimental work.	My research currently revolves around concurrent data structures, especially lock-free ones.	I am also interested in transactional memory, non-volatile memory, and techniques for coping with non-uniform memory architectures.	Supervisor at IST Austria: Dan Alistarh	Supervisor at the Technion: Hagit Attiya	Supervisor at U of T: Faith Ellen	Contact: me [at] tbrown [dot] pro	Curriculum Vitae: [PDF]	Current Teaching	798 Multicore programming	Publications and Slides	My CV contains links to all of my publications, sets of slides, and some videos of my talks.	Software Artifacts	Over the years, I have made quite a bit of code publicly available.	Most of it can be found in my implementations or setbench bitbucket repositories.	Specific implementations are highlighted below.	[C++] Synchronization primitives:	Fast LLX and SCX (algorithm from this paper with optimization from this paper)	Fast multiword CAS (algorithm from this paper with optimization from this paper)	[C++] Memory reclamation	Easy memory reclamation for concurrent data structures	[C++] My trees:	Lock-free relaxed (a,b)-tree - fastest search tree I am aware of (when paired with a fast allocator)	(see Chapter 8 of my thesis ; benchmarked much faster than the 10 trees in this paper ; see minimal_example.cpp for usage)	Lock-free relaxed (a,b)-tree with atomic range queries (see this paper; see minimal_example.cpp for usage)	Lock-free relaxed B-slack tree with atomic range queries (see minimal_example.cpp for usage)	(see Chapters 9 and 10 of my thesis; extremely fast searches with few updates; space efficient; see minimal_example.cpp for usage)	Lock-free BST with atomic range queries (see this paper; see minimal_example.cpp for usage)	Lock-free chromatic tree (see chromatic*.h; based on this paper; note: could be greatly accelerated with this optimization)	[C++] Modified versions of other trees:	(adding memory reclamation and a uniform interface, and fixing numerous correctness/performance issues - see these slides)	Lock-free external BST of Ellen et al. (see minimal_example.cpp for usage)	Lock-free external BST of Natarajan et al.	(fixed memory reclamation bugs in authors' implementation - see comment here; see minimal_example.cpp for usage)	Lock-free internal BST of Howley et al. (see minimal_example.cpp for usage)	Lock-free internal BST of Ramachandran et al. (see minimal_example.cpp for usage)	Optimistic external BST of David et al. (see minimal_example.cpp for usage)	Optimistic partially external BST of Bronson et al. (see minimal_example.cpp for usage)	Lock-based partially external BST of Drachsler et al. (see minimal_example.cpp for usage)	[C++] Modified data structures with atomic range queries:	Optimistic lock-based linked list (Lazy list)	Lock-free linked list	RLU-based linked list	Lock-based skip list	RCU and lock-based internal BST (CITRUS)	RLU-based internal BST (RLU CITRUS)	[C++] Data structures for Intel Hardware Transactional Memory (HTM / TSX-NI):	HTM lock-free external BST	HTM lock-free relaxed (a,b)-tree	(underlying lock-free (a,b)-tree is inferior to the one above; could be greatly improved by adding HTM to the above version)	HTM RCU and lock-based internal BST (CITRUS)	[Java] My data structures:	Lock-free external BST of Ellen et al.	Lock-free k-ary search tree (with atomic range queries) (see this paper)	Lock-free quaternary search tree (see this paper)	Lock-free chromatic tree (see this paper)	Lock-free relaxed AVL tree (see this paper)	Lock-free relaxed B-slack tree	(see Chapters 9 and 10 of my thesis; extremely fast searches with few updates; space efficient)	Performing data structure experiments	Recently, I've been thinking a lot about the question of how one should perform rigorous data structure experiments.	In October 2017, I gave an invited talk on this subject at the 1st Workshop on the Theory and Practice of Concurrency (colocated with DISC).	If you are interested in this sort of thing, I've uploaded a video on Youtube.	In June 2018, I gave a talk at TU Wien on concurrent binary search trees, and how implementation mistakes and memory layout issues can drastically affect their performance.	Slides can be found here.	Tutorial Videos	I have also started producing video tutorials that distill lessons I've learned while coding up concurrent data structures and experiments.	I'll post them here, as I record them.	NUMA memory placement matters (13:36)	Rapidly produce charts from many dimensional data! (12:39) [Excel chart factory tool]	Using Valgrind to find elusive bugs quickly (16:00)	Past Teaching	TA for CSC263 Winter 2014: data structures [under Sam Toueg]	[Tutorial notes/slides]	TA for CSC2221 Fall 2013: introduction to distributed computing [graduate course; under Sam Toueg]	TA for CSC263 Winter 2013: data structures [under Sam Toueg]	[Tutorial notes/slides]	TA for CSC369 Fall 2012: operating systems [under Angela Demke-Brown]	[Tutorial notes/slides]	TA for CSC263 Winter 2012: data structures [under Sam Toueg]	TA for CSC263 (and 265) Fall 2011: (enhanced) data structures [under Faith Ellen, Toni Pitassi]	Personal Websites	Note: As of September 2017, I've been having problems with my webhost, and my sites are all down. Unfortunately, I have not yet had time to resolve the issue with them.	Japanese vocabulary flash cards	(developed to accompany the first and second year Japanese language courses at York University)	Kanji (Sino-Japanese character) flash cards	(developed to accompany the second year Japanese language course JP2000 at York University)	a large repository of solutions to problems from the ACM international collegiate programming contests	(I participated four times,	and my team, GNU Yorkers, placed 6th and 12th out of ~110 teams in 2009 and 2010, respectively.)	solutions to many problems in the 4th edition Operations Research textbook	by Wayne L. Winston	Miscellanea	I've chronicled some of my struggles with repetitive strain injuries in my wrists here.	I also have some stuff (Python code) pertaining to the CSC2501 course at the U of T	here.
