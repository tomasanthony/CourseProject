 about publications teaching activities apps Deian Stefan Assistant Professor Department of Computer Science and Engineering University of California, San Diego Office: CSE 3126 Email: first-name @cs.ucsd.edu Research interests: security & privacy, programming languages, systems . [ Twitter | Keybase.io | GitHub | CryptoSec | ProgSys | SysNet | CONIX ] About Me I am an Assistant Professor in the UCSD CSE Department . I am also the Chief Scientist at Intrinsic (formerly GitStar), a web security start-up I co-founded. My research interests are in building principled and practical secure systems. More broadly, I am interested in research that spans systems, security, and programming languages. My students and I work on several secure systems, spanning from new Web server frameworks (Hails and Frankie), to Web browser architectures ( COWL ), to constant-time programming languages (FaCT and CT-Wasm), to package managers (SPAM), to multi-core language runtime systems and garbage collectors (LIO, SaferNode.js, and Physis). We are also building benchmarking tools and static bug finding tools to evaluate the performance and security of existing systems and the stuff we build. At Intrinsic, I am putting much research into practice by similarly building systems, tools, and languages that ultimately make it easier for developers to build and deploy web applications with minimal trust. I am also a member of the W3C WebAppSec Working Group and Node.js Security Working Group. I completed my Ph.D. in Computer Science at Stanford under "Prof." David Mazires and Prof. John C. Mitchell and (informally) Prof. Alejandro Russo . Prior to Stanford, I obtained a B.E. and M.E. in Electrical Engineering at Cooper Union . At Cooper, I worked on GPU and FPGA crypto implementations. I am still generally interested in hardware architectures, especially in the context of security. Projects Below are several projects I have been working on. You can read about my broader research vision in my research statement . If you are a student interest in hacking systems or semantics: contact me! ESpectro - security architecture for Node.js Espectro is a security architecture for server-side JavaScript applications. Today's networked applications do not run with least privilege , making them likely to cause great damage when compromised. Unfortunately, even if developers tried to compartmentalize and secure their applications, existing techniques, such as syscall interposition and containers , are not sufficient: they require developers to specify complex, low-level policies, and, worse yet, operate at the process level. While useful for defense-in-depth, this makes them unsuitable for enforcing many application specific policies. ESpectro addresses these limitations for server-side JavaScript apps, by executing code in light-weight contexts which expose virtualized versions of the core Node.js libraries. Functions in these libraries are implemented as messages to a trusted (parent) context which can perform security checks before and after executing the real Node.js function (the result of which is sent back as a message). In fact, the trusted code can provide a completely different implementation for the virtualized interface to, for instance, implement caching, transparent encryption, SQL/HTML escaping, or a light-weight reverse proxy. The generality of the architecture makes it possible to implementas a librarydifferent security mechanisms (including mandatory access control ), web-server architectures (e.g., Hails, Passe , OKWS ), policy specification engines, etc. Amongst other, we are using the system to build a production web platform (similar to that described in the OSDI'12 paper ) and the module system for the Breach browser . A research paper describing the system and use cases will be available soon. COWL - confinement system for the Web COWL (Confinement with Origin Web Labels) is confinement system for modern web browsers. Web applications running in the browser are conglomerations of JavaScript written by multiple authors: developers routinely incorporate code from third-party libraries, and mashups synthesize data and code hosted at different sites. In existing browsers, both developers and users must trust third-party code not to leak the user's sensitive information from within applications. Even worse, in the status quo, the only way to implement some mashups is for the user to give her login credentials for one site to the operator of another site. COWL addresses this limitation by introducing label-based mandatory access control (MAC) to browsing contexts (pages, iframes, etc.) in a way that is fully backward-compatible with legacy web content. With COWL, developers not only can restrict with whom they share data, but also can impose restrictions on how their data is disseminated once it is shared. COWL achieves flexibility by allowing code to fetch and share data as necessary; it also achieves privacy by ensuring that once code has read sensitive data, it cannot communicating with unauthorized parties that would compromise the data privacy. The COWL site has several examples (code and screenshots) showing this in detail. There are many MAC systems out there (some of which I built), but the key behind COWL was to figure out a design point that is suitable for the browser. In particular, we wanted a system that confines JavaScript without having to reason about the quirky semantics of the language, without modifying the JavaScript engine, without breaking or slowing down the existing Web, and without imposing too many new concepts on developers. The OSDI'14 paper explains how we did this, while the HotOS XIV gives a flavor of what we can do if we modify browsers to add MAC as the underlying mechanism. The IFC inside tech report describes the formal semantics for a somewhat simplified model of COWL. COWL is now a W3C spec being worked on by the W3C WebAppSec group . [ code | spec | web site ] Hails - secure web platform framework Hails is a Haskell web framework designed for building extensible web platforms . Today's web platforms (e.g., Facebook and Yammer) typically expose REST-like APIs for accessing user data to external apps which, when granted access, can provide new rich functionality. Unfortunately, once granted access, these apps can do as they please with the (often sensitive) data: a malicious or buggy app can easily leak and corrupt user data. This unfortunately forces the end-user to choose between using third-party apps or give up on that functionality to preserve their privacy. To addresses this problem, Hails ties security policies to data using mandatory access control (MAC) or information flow control (IFC) labels. The Hails trusted runtime then ensures that all apps (which now run on the Hails platform) abide by these labels. This allows the platform to treat all apps as untrusted; Hails ensures that these apps cannot leak or corrupt labeled user data. Indeed, core parts of a website can be implemented as untrusted apps, making it easy to build extensible platforms without trading off privacy. While MAC and IFC systems have been around for a while, Hails stands out as a system that is usable by average developers, today. To this end, we implemented Hails as a library, as opposed to a new language runtime or OS. Moreover, we provide developers with a way of structuring applications in a simple way: Hails just extends the Model-View-Controller architecturewith Policy . Platform developers now only have the additional task of specifying policy. And, Hails makes this an approachable task by tying in the policy with the model definition and providing a declarative, simple policy language for expressing data policies. Expressing high-level concerns in a declarative, simple fashion has been an open challenge for MAC systems. We addressed this challenge and describe the system in the OSDI'12 paper , with a high-level motivation in the POST'14 invited talk . The simple, yet expressive label model used by Hails is described in the NordSec'11 paper . [ code | hackage ] LIO - practical and expressive language-based DIFC system LIO is a dynamic, language-level decentralized information flow control (DIFC) system. The system explores a new design point in the DIFC space: a mixed-grained DIFC system. This means that LIO typically tracks and controls the flow of information at a coarse grained level (light-weight threads), while still allowing programmers to associate policies (labels) with individual data, when necessary. This has a number of benefits: it allows for the retrofitting of a language with the security mechanism without many changes to its runtime (in Haskell: none); the mechanism can be exposed as a simple API, without changing the language semantics; and, it has a minimal impact on performance. Interestingly, this mixed-grained approach has the expressivity of fine-grained systems in allowing programmers to associate labels with individual values, and the benefit of coarse-grained DIFC OSes in not forcing programmers to understand and reason about many parts of the system: they only need to reason about the data they associate a label with. The sequential LIO calculus, Coq proofs, and Haskell implementation are described in the JFP paper and Haskell'11 paper . In the ICFP'12 paper we addressed the open challenge of having an expressive concurrent DIFC system that does not leak information through timing covert channels, and showed how to encode flow-sensitive references (common to fine-grained systems) in these calculi in the CSF'14 paper . The demos at PLAS'14 and Haskell'14 show how to build real systems, like Hails, with LIO. [ code | hackage ] P,S - using types to soundly compute on encrypted data P,S is a core, but feature-rich language for programming on encrypted data. Secure multiparty computation (SMC) and fully homomorphic encryption (FHE) are promising building blocks for protecting data from untrusted servers; they allow servers to perform computations on encrypted data without access to decryption keys. Unfortunately, existing approaches to programming on encrypted data are restricting: they require compilation to boolean garbled circuits or using APIs in general-purpose languages. The former limits the kinds of programs that can be written, while the latter allows writing programs that cannot be securely executed. P,S is a new programming language and runtime that addresses these cncerns. The language supports many features common to functional languages such as ML, including conditionals, mutable state, and a form of general recursion. Interestingly, programs are developed and tested using conventional means, without encryption or expert-knowledge of crypto. Using an information-flow type system, our compiler ensures that code that can compile can also run on a secure platform that uses SMC and FHE to provide strong guarantees. The CSF'12 paper and FSTTCS'11 invited talk describe this language, Haskell implementation, and several use cases. Professional Activities I have served, or am serving, on the program committees for: 2020: S&P 2019: SOSP , Security , S&P , PriSC , TheWebConf 2018: S&P , PLDI , SecDev CSF , FCS 2017: CCS , Security , Euro S&P , SEC@SAC , WWW , SecDev (Tutorial track) 2016: SEC@SAC , POST , Security , PLAS (PC co-chair) , SecDev 2015: FCS , HiW Teaching Spring 2019: CSE 227: Graduate Computer Security (largely for PhD students) Winter 2019: CSE 127: Computer Security Fall 2018: CSE 227: Graduate Computer Security Winter 2018: CSE 130: Programming Languages: Principles and Paradigms CSE 291: Language-based Security Winter 2017: CSE 130: Programming Languages: Principles and Paradigms Fall 2016: CSE 291: Building Secure Systems using Programming Languages and Analysis CSE 290: Early Papers in Computer Security (co-taught with Hovav Shacham ) Prior to UCSD, I was also an instructor and teaching assistant for several courses at Stanford and Cooper. Stanford Fall 2014: CS242: Programming Languages (co-taught with Edward Z. Yang ) Fall 2013: CS242: Programming Languages (co-taught with Edward Z. Yang ) Winter 2013: CS240: Advanced Topics in Operating Systems (assistant) Fall 2011: CS242: Programming Languages (assistant) Cooper Union Summer 2010: Advanced Programming in Java (retraining program instructor) Spring 2010: Programming in Java (retraining program instructor) Spring 2009: ECE403: Selected Topics in Probability and Stochastic Processes (assistant) Spring 2007: ECE150: Digital Logic Design (assistant) Fall 2006: ECE150: Digital Logic Design (assistant) Selected Publications Below you will find a select list of papers. Google Scholar has a slightly more complete list. Conferences/Workshops Marco Vassena, Gary Soeller, Peter Amidon, Matthew Chan, John Renner, and Deian Stefan. Foundations for parallel information flow control runtime systems. In Proceedings of Conference on Principles of Security and Trust (POST), Springer. April, 2019. [ paper | bibtex ] Jean Pierre Talpin, Jean Joseph Marty, Shravan Narayan, Deian Stefan, and Rajesh Gupta. Towards verified programming of embedded devices. In Proceedings of IEEE Design, Automation and Test in Europe (DATE). March, 2019. Invited paper. [ paper | bibtex ] Conrad Watt, John Renner, Natalie Popescu, Sunjay Cauligi, and Deian Stefan CT-Wasm: Type-Driven Secure Cryptography for the Web Ecosystem. In Proceedings of ACM SIGPLAN Symposium on Principles of Programming Languages (POPL). January, 2019. [ paper | bibtex ] Klaus von Gleissenthall, Rami Gkhan KcUniversity, Alexander Bakst, Deian Stefan, and Ranjit Jhala. Pretend Synchrony: Synchronous Verification of Asynchronous Distributed Programs. In Proceedings of ACM SIGPLAN Symposium on Principles of Programming Languages (POPL). January, 2019. [ paper | bibtex ] Marco Vassena, Alejandro Russo, Deepak Garg, Vineet Rajani, and Deian Stefan. From Fine- to Coarse-Grained Dynamic Information Flow Control and Back. In Proceedings of ACM SIGPLAN Symposium on Principles of Programming Languages (POPL). January, 2019. Distinguished paper award. [ paper | bibtex ] Craig Disselkoen, Tal Garfinkel, Deian Stefan, and Conrad Watt. Trestle: Bridging the Performance and Safety Divide in WebAssembly. In Workshop on Principles of Secure Compilation (PriSC). January, 2019. [ paper | bibtex ] Marc Andrysco, Andres Netzli, Fraser Brown, Ranjit Jhala, and Deian Stefan. Towards Verified, Constant-time Floating Point Operations. In Proceedings of ACM Conference on Computer and Communications Security (CCS). October, 2018. [ paper | bibtex ] Michael Smith, Craig Disselkoen, Shravan Narayan, Fraser Brown, and Deian Stefan. Browser history re:visited. In Proceedings of USENIX Workshop on Offensive Technologies (WOOT). August, 2018. [ paper | bibtex ] John Renner, Sunjay Cauligi, and Deian Stefan. Constant-Time WebAssembly. In Workshop on Principles of Secure Compilation (PriSC). January, 2018. [ paper | bibtex ] Sunjay Cauligi, Gary Soeller, Fraser Brown, Brian Johannesmeyer, Yunlu Huang, Ranjit Jhala, and Deian Stefan. FaCT: A Flexible, Constant-Time Programming Language. In Proceedings of Cybersecurity Development (SecDev), IEEE. September, 2017. [ paper | bibtex ] Gary Soeller and Deian Stefan. Multi-core IFC: Securing the space-time continuum. In Workshop on Foundations of Computer Security (FCS). August, 2017. [ paper | bibtex ] Fraser Brown, Shravan Narayan, Riad S. Wahby, Dawson Engler, Ranjit Jhala, and Deian Stefan. Finding and Preventing Bugs in JavaScript Bindings. In Proceedings of Symposium on Security and Privacy, IEEE. May, 2017. [ paper | bibtex ] Stefan Heule, Devon Rifkin, Deian Stefan, and Alejandro Russo. The Most Dangerous Code in the Browser. In Proceedings of Workshop on Hot Topics in Operating Systems (HotOS), USENIX. May, 2015. [ paper | bibtex | slides ] Stefan Heule, Deian Stefan, Edward Z. Yang, John C. Mitchell, and Alejandro Russo. IFC Inside: Retrofitting Languages with Dynamic Information Flow Control. In Proceedings of Conference on Principles of Security and Trust (POST), Springer. April, 2015. [ paper | bibtex | extended ] Deian Stefan, Edward Z. Yang, Petr Marchenko, Alejandro Russo, Dave Herman, Brad Karp, and David Mazires. Protecting Users by Confining JavaScript with COWL. In Proceedings of Symposium on Operating Systems Design and Implementation (OSDI), USENIX. October, 2014. [ paper | bibtex | slides | video ] Pablo Buiras, Deian Stefan, and Alejandro Russo. On Dynamic Flow-sensitive Floating-Label Systems. In Proceedings of Computer Security Foundations Symposium (CSF), IEEE. July, 2014. [ paper | bibtex ] Deian Stefan, Pablo Buiras, Edward Z. Yang, Amit Levy, David Terei, Alejandro Russo, and David Mazires. Eliminating Cache-based Timing Attacks with Instruction-based Scheduling. In Proceedings of European Symposium on Research in Computer Security (ESORICS), Springer. September, 2013. [ paper | bibtex | slides ] Pablo Buiras, Amit Levy, Deian Stefan, Alejandro Russo, and David Mazires. A Library for Removing Cache-Based Attacks in Concurrent Information Flow Systems. In Proceedings of Trustworthy Global Computing (TGC), Springer. August, 2013. [ paper | bibtex | extended ] Edward Yang, Deian Stefan, John Mitchell, David Mazires, Petr Marchenko, and Brad Karp. Toward Principled Browser Security. In Proceedings of Workshop on Hot Topics in Operating Systems (HotOS), USENIX. May, 2013. [ paper | bibtex | slides ] Daniel B. Giffin, Amit Levy, Deian Stefan, David Terei, David Mazires, John Mitchell, and Alejandro Russo. Hails: Protecting Data Privacy in Untrusted Web Applications. In Proceedings of Symposium on Operating Systems Design and Implementation (OSDI), USENIX. October, 2012. [ paper | bibtex | slides | video ] Deian Stefan, Alejandro Russo, Pablo Buiras, Amit Levy, John C. Mitchell, and David Mazires. Addressing Covert Termination and Timing Channels in Concurrent Information Flow Systems. In Proceedings of International Conference on Functional Programming (ICFP), ACM SIGPLAN. September, 2012. [ paper | bibtex | slides | video ] John C. Mitchell, Rahul Sharma, Deian Stefan, and Joe Zimmerman. Information-flow control for programming on encrypted data. In Proceedings of Computer Security Foundations Symposium (CSF), IEEE. June, 2012. [ paper | bibtex ] Deian Stefan, Alejandro Russo, David Mazires, and John C. Mitchell. Disjunction Category Labels. In Proceedings of Nordic Conference on Security IT Systems (NordSec), Springer. October, 2011. [ paper | bibtex | slides ] Deian Stefan, Alejandro Russo, John C. Mitchell, and David Mazires. Flexible Dynamic Information Flow Control in Haskell. In Proceedings of Haskell Symposium, ACM SIGPLAN. September, 2011. [ paper | bibtex | slides ] Deian Stefan and Danfeng Yao. Keystroke-dynamics authentication against synthetic forgeries. In Proceedings of Collaborative Computing: Networking, Applications and Worksharing (CollaborateCom), IEEE. October, 2010. Best Paper Award. [ paper | bibtex ] Joppe W. Bos and Deian Stefan. Performance analysis of the SHA-3 candidates on exotic multi-core architectures. In Proceedings of Cryptographic Hardware and Embedded Systems (CHES), Springer. August, 2010. [ paper | bibtex ] Shahram Khazaei, Simon Knellwolf, Willi Meier, and Deian Stefan. Improved Linear Differential Attacks on CubeHash. In Proceedings of International Conference on Cryptology (AFRICACRYPT), Springer. May, 2010. Awarded the 2010.01 Prize by DJB. [ paper | bibtex ] Dag Arne Osvik, Joppe W. Bos, Deian Stefan, and David Canright. Fast software AES encryption. In Proceedings of International Workshop on Fast Software Encryption (FSE), Springer. February, 2010. [ paper | bibtex ] Deian Stefan. Hardware Framework for the Rabbit Stream Cipher. In Proceedings of International Conference on Information Security and Cryptology (INSCRYPT), Springer. December, 2009. [ paper | bibtex ] Jared Harwayne-Gidansky, Deian Stefan, and Ishaan L. Dalal. FPGA-based SoC for real-time network intrusion detection using counting bloom filters. In Proceedings of SoutheastCon, IEEE. March, 2009. [ paper | bibtex ] Ishaan L. Dalal, Deian Stefan, and Jared Harwayne-Gidansky. Low discrepancy sequences for Monte Carlo simulations on reconfigurable platforms. In Proceedings of International Conference on Application-Specific Systems, Architectures and Processors (ASAP), IEEE. July, 2008. [ paper | bibtex ] Deian Stefan, David B. Nummey, Jared Harwayne-Gidansky, and Ishaan L. Dalal. On Parallelizing the CryptMT Stream Cipher. In Proceedings of Vehicular Technology Conference (VTC Spring), IEEE. May, 2008. [ paper | bibtex ] Ishaan L. Dalal and Deian Stefan. A hardware framework for the fast generation of multiple long-period random number streams. In Proceedings of International Symposium on Field Programmable Gate Arrays (FPGA), ACM. February, 2008. [ paper | bibtex ] Deian Stefan and Christopher Mitchell. On the Parallelization of the MICKEY-128 2.0 Stream Cipher. In Proceedings of The State of the Art of Stream Ciphers (SASC), Springer. February, 2008. [ paper | bibtex ] Journals Daniel B. Giffin, Amit Levy, Deian Stefan, David Terei, David Mazires, John Mitchell, and Alejandro Russo. Hails: Protecting Data Privacy in Untrusted Web Applications Journal of Computer Security, IOS Press. Volume 25, Issue 4-5, 2017. [ paper | bibtex | publisher ] Deian Stefan, Alejandro Russo, David Mazires, and John C. Mitchell. Flexible Dynamic Information Flow Control in the Presence of Exceptions. Journal of Functional Programming, Cambridge University Press. Volume 27, 2017. [ paper | bibtex | proofs | publisher ] Deian Stefan, Xiaokui Shu, and Danfeng (Daphne) Yao. Robustness of keystroke-dynamics based biometrics against synthetic forgeries. Computers & Security, Elsevier. 31(1) 2012. [ paper | bibtex ] Kui Xu, Huijun Xiong, Chehai Wu, Deian Stefan, and Danfeng Yao. Data-Provenance Verification For Secure Hosts. Transactions on Dependable and Secure Computing, IEEE. 2012. [ paper | bibtex ] Specifications Deian Stefan. Confinement with Origin Web Labels. World Wide Web Consortium, First Public Working Draft WD-COWL-20151015. October, 2015. [ spec | bibtex ] Demos Deian Stefan, Amit Levy, Alejandro Russo, and David Mazires. Building Secure Systems with LIO. In Proceedings of Haskell Symposium, ACM SIGPLAN. September, 2014. [ paper | bibtex | slides | video | code ] Amit Levy, David Terei, and David Mazires. Making Web Applications -XSafe. In Proceedings of Haskell Symposium, ACM SIGPLAN. September, 2014. [ paper | bibtex ] Deian Stefan and David Mazires. Building Secure Systems with LIO. In Proceedings of Workshop on Programming Languages and Analysis for Security (PLAS), ACM SIGPLAN. July, 2014. Invited talk. [ paper | bibtex | slides | code ] Non-refereed/Unpublished Fraser Brown, Ariana Mirian, Atyansh Jaiswal, Andres Netzli, Deian Stefan. SPAM: a Secure Package Manager. April, 2017. [ paper | bibtex ] Daniel B. Giffin, Stefan Heule, Amit Levy , David Mazires, John Mitchell, Alejandro Russo, Amy Shen, Deian Stefan, David Terei, and Edward Z. Yang. Security and the average programmer. In Proceedings of Conference on Principles of Security and Trust (POST), Springer. April, 2014. Invited paper. [ paper | bibtex ] Alex Bain, John Mitchell, Rahul Sharma, Deian Stefan, and Joe Zimmerman. A Domain-Specific Language for Computing on Encrypted Data. In Proceedings of Foundations of Software Technology and Theoretical Computer Science (FSTTCS), LIPIcs. December, 2011. Invited paper. [ paper | bibtex | extended ] Deian Stefan and John C. Mitchell. Analysing Object-Capability Patterns With Mur. April, 2011. [ paper | bibtex ] Theses Deian Stefan. Principled and Practical Web Application Security. Ph.D. Thesis, Stanford University. December, 2015. [ thesis | bibtex ] Deian Stefan. Analysis and Implementation of eSTREAM and SHA-3 Cryptologic Algorithms. M.Eng. Thesis, Cooper Union. May, 2011. [ thesis | bibtex ] The documents distributed by this server have been provided as a means to ensure timely dissemination of scholarly and technical work on a noncommercial basis. Copyright and all rights therein are maintained by the authors or by other copyright holders, notwithstanding that the works are offered here electronically. It is understood that all persons copying this information will adhere to the terms and constraints invoked by each author's copyright. These works may not be distributed without the explicit permission of the copyright holder. Application Materials Below you can find my curriculum vitae, research statement, and teaching statement. My curriculum vitae contains the contact information for my references. Curriculum Vitae Research Statement Teaching Statement The following three papers are representative: Protecting Users by Confining JavaScript with COWL , published in the proceedings of Symposium on Operating Systems Design and Implementation (OSDI) , 2014. Hails: Protecting Data Privacy in Untrusted Web Applications , published in the proceedings of Symposium on Operating Systems Design and Implementation (OSDI) , 2012. Flexible Dynamic Information Flow Control in the Presence of Exceptions , under revision at the Journal of Functional Programming (JFP) . 
